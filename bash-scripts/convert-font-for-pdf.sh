#!/usr/bin/env bash
# convert-font-for-pdf.sh
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ: –≤—ã–±—Ä–∞—Ç—å PDF –∏ —à—Ä–∏—Ñ—Ç; –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –ø–æ—á–∏—Å—Ç–∏—Ç—å –µ–≥–æ –∏ —Å–æ–±—Ä–∞—Ç—å
# –Ω–æ–≤—ã–π PDF c –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞; –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è).
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Arch):
#   sudo pacman -S --needed poppler pandoc fontconfig fzf iconv sed
#   # PDF-–¥–≤–∏–∂–æ–∫ (–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω):
#   sudo pacman -S --needed tectonic                 # ‚Üê –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û
#   # –ª–∏–±–æ: sudo pacman -S --needed texlive-bin texlive-core texlive-latexextra

set -euo pipefail

err()  { printf "\e[31m%s\e[0m\n" "$*" >&2; }
info() { printf "\e[36m%s\e[0m\n" "$*"; }
note() { printf "\e[33m%s\e[0m\n" "$*"; }

need_cmds=(pdftotext pandoc fc-list fc-match fzf iconv sed tr)
missing=()
for c in "${need_cmds[@]}"; do command -v "$c" >/dev/null 2>&1 || missing+=("$c"); done
if (( ${#missing[@]} )); then
  err "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing[*]}"
  echo "–£—Å—Ç–∞–Ω–æ–≤–∏ (Arch): sudo pacman -S --needed poppler pandoc fontconfig fzf iconv sed"
  echo "–ò –æ–¥–∏–Ω –∏–∑ PDF-–¥–≤–∏–∂–∫–æ–≤:  sudo pacman -S --needed tectonic   # –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û"
  exit 1
fi

pick_pdf_engine() {
  if command -v tectonic >/dev/null 2>&1; then
    printf '%s\n' "tectonic"
    return
  fi
  if command -v xelatex >/dev/null 2>&1; then
    printf '%s\n' "xelatex"
    return
  fi
  err "–ù–µ –Ω–∞–π–¥–µ–Ω PDF-–¥–≤–∏–∂–æ–∫ (tectonic –∏–ª–∏ xelatex). –£—Å—Ç–∞–Ω–æ–≤–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö."
  exit 1
}

# –ü–æ–¥–±–µ—Ä—ë–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π pandoc-–≤—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç (—É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–±–æ—Ä–æ–∫ –Ω–µ—Ç 'plain')
pandoc_from() {
  if pandoc --list-input-formats 2>/dev/null | grep -qx 'plain'; then
    printf '%s\n' "plain"
  else
    printf '%s\n' "markdown_strict"
  fi
}

pick_pdf() {
  local sel
  sel="$(
    find . -type f -iname '*.pdf' -printf '%P\n' \
    | sort -f \
    | fzf --prompt='PDF > ' --height=80% --reverse --border --cycle
  )"
  [[ -n "${sel:-}" ]] || { err "–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ PDF"; exit 1; }
  printf '%s\n' "$sel"
}

list_families_unique() {
  fc-list : family \
    | tr ',' '\n' \
    | sed 's/^[[:space:]]\+//; s/[[:space:]]\+$//' \
    | awk 'BEGIN{IGNORECASE=1} {k=tolower($0); if(!seen[k]++ && length($0)>0) print $0}' \
    | sort -f
}

pick_font() {
  local query="${1:-}"
  local sel
  sel="$(
    list_families_unique \
    | fzf --prompt='Font > ' --height=80% --reverse --border --cycle ${query:+--query="$query"}
  )"
  [[ -n "${sel:-}" ]] || { err "–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"; exit 1; }
  printf '%s\n' "$sel"
}

font_exists() {
  local fam="$1"
  if fc-list ":family=$fam" | grep -q .; then
    return 0
  fi
  if fc-list | grep -qi --fixed-strings "$fam"; then
    return 0
  fi
  return 1
}

sanitize() {
  printf '%s' "$1" | sed -e 's/[[:space:]]\+/_/g' -e 's/[^A-Za-z0-9._+-]/_/g'
}

build_pdf() {
  local input="$1" font="$2" output="$3" engine="$4"
  local from_fmt
  from_fmt="$(pandoc_from)"

  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  local tmp_txt tmp_clean
  tmp_txt="$(mktemp)"
  tmp_clean="$(mktemp)"
  cleanup() { rm -f -- "$tmp_txt" "$tmp_clean"; }
  trap cleanup RETURN

  info "üìú –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç: $input"
  # UTF-8, –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
  pdftotext -enc UTF-8 -nopgbrk "$input" "$tmp_txt"

  # –°–∞–Ω–∏—Ç–∞—Ü–∏—è:
  #  - —É–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ \x00‚Äì\x1F (–∫—Ä–æ–º–µ —Ç–∞–±/–ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏)
  #  - NBSP (C2 A0) -> –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
  #  - soft hyphen (C2 AD) -> —É–¥–∞–ª–∏—Ç—å
  #  - –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã iconv'–æ–º
  iconv -f utf-8 -t utf-8 -c "$tmp_txt" \
  | tr -d '\000-\010\013\014\016-\037' \
  | sed -e 's/\xC2\xA0/ /g' -e 's/\xC2\xAD//g' \
  > "$tmp_clean"

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
  if ! grep -q '[^[:space:]]' "$tmp_clean"; then
    err "–ò–∑–≤–ª–µ—á—ë–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, PDF ‚Äî —Å–∫–∞–Ω –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è."
    note "OCR (–ø—Ä–∏–º–µ—Ä): sudo pacman -S --needed ocrmypdf tesseract tesseract-data-eng"
    note "              ocrmypdf --deskew --optimize 3 '$input' '$(dirname -- "$output")/ocr_$(basename -- "$output")'"
    exit 1
  fi

  info "üõ† –°–æ–±–∏—Ä–∞—é PDF —Å–æ —à—Ä–∏—Ñ—Ç–æ–º: $font (–¥–≤–∏–∂–æ–∫: $engine; pandoc --from=$from_fmt)"
  if [[ "$engine" == "tectonic" ]]; then
    pandoc "$tmp_clean" \
      --from="$from_fmt" \
      -V mainfont="$font" \
      -V fontsize=11pt \
      -V geometry:"a4paper,margin=2cm" \
      --pdf-engine=tectonic \
      -o "$output"
  else
    if ! kpsewhich xelatex.fmt >/dev/null 2>&1; then
      err "–£ xelatex –Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ xelatex.fmt."
      echo "–ü–æ–ø—Ä–æ–±—É–π (root):  sudo mktexlsr && sudo fmtutil-sys --byfmt xelatex  ||  sudo fmtutil-sys --all"
      echo "–õ–∏–±–æ –ø–æ—Å—Ç–∞–≤—å tectonic:  sudo pacman -S --needed tectonic"
      exit 1
    fi
    pandoc "$tmp_clean" \
      --from="$from_fmt" \
      -V mainfont="$font" \
      -V fontsize=11pt \
      -V geometry:"a4paper,margin=2cm" \
      --pdf-engine=xelatex \
      -o "$output"
  fi

  info "‚úÖ –ì–æ—Ç–æ–≤–æ: $output"
}

main() {
  local input font output in_dir in_base base_no_ext font_safe engine

  input="$(pick_pdf)"
  [[ -f "$input" ]] || { err "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $input"; exit 1; }

  # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å): Noto/DejaVu/Inter/FiraCode
  font="$(pick_font "Noto Sans")"
  if ! font_exists "$font"; then
    err "–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: $font"
    info "–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É fontconfig:"
    echo "  fc-list | grep -i 'noto\\|dejavu\\|inter\\|fira'"
    echo "  fc-list ':family=$font'"
    info "–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à: fc-cache -fv"
    exit 1
  fi

  info "üîé –ö–∞–∫–æ–π —Ñ–∞–π–ª –ø–æ–¥—Å—Ç–∞–≤–∏—Ç fontconfig (–ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞):"
  fc-match -s "$font" | sed -n '1,3p' || true

  in_dir="$(dirname -- "$input")"
  in_base="$(basename -- "$input")"
  base_no_ext="${in_base%.*}"
  font_safe="$(sanitize "$font")"
  output="${in_dir}/${base_no_ext}_${font_safe}.pdf"

  engine="$(pick_pdf_engine)"
  build_pdf "$input" "$font" "$output" "$engine"
}

main
